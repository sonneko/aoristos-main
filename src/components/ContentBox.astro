---
interface Props {
    subTitle: string;
    description: string;
}
const props = Astro.props;
---

<div class="content-box">
    <h5>ãƒ»{props.subTitle}</h5>
    <h3 class="content-box-title">
        <slot name="title" />
    </h3>
    <p set:html={props.description}></p>
</div>

<style lang="scss">
    @keyframes content-title-anime {
        from {
            transform: translateX(-25vw);
        }
        to {
            transform: translateX(0);
        }
    }
    .content-box {
        position: relative;
        display: block;
        padding: 12rem 0;
        background-color: white;
        h5 {
            font-size: 20px;
            margin-top: 3.4rem;
        }
        h3 {
            margin-top: 3.6rem;
            font-size: 35px;
        }
        p {
            margin-top: -4rem;
            a {
                text-decoration-line: underline;
            }
        }
    }
    .content-box-title-active {
        animation: content-title-anime 1.4s ease;
    }
    .content-box p{
        @include media(ph) {
            margin-top: 2rem;
            margin-left: 40%;
        }
        @include media(pc) {
            margin-top: -4rem;
            margin-left: 65%;
        }
    }
</style>

<script>
    const contentBoxTitleAnimation = () => {
        const contentTitleEles =
            document.getElementsByClassName("content-box-title");
        Array.from(contentTitleEles).forEach((item) => {
            const scroll = window.scrollY;
            const windowHeight = window.innerHeight;
            window.addEventListener("scroll", () => {
                const targetPos = item.getBoundingClientRect().top + scroll;
                if (scroll + 200 > targetPos - windowHeight) {
                    item.classList.add("content-box-title-active");
                } else {
                    item.classList.remove("content-box-title-active");
                }
            });
        });
    };
    contentBoxTitleAnimation();
</script>
